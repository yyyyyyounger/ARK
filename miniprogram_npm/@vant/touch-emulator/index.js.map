{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/* eslint-disable */\r\n/**\r\n * Emulate touch event\r\n * Sourceï¼šhttps://github.com/hammerjs/touchemulator\r\n */\r\n\r\n(function () {\r\n  if (typeof window === 'undefined') {\r\n    return;\r\n  }\r\n  var eventTarget;\r\n  var supportTouch = 'ontouchstart' in window;\r\n\r\n  // polyfills\r\n  if (!document.createTouch) {\r\n    document.createTouch = function (\r\n      view,\r\n      target,\r\n      identifier,\r\n      pageX,\r\n      pageY,\r\n      screenX,\r\n      screenY\r\n    ) {\r\n      // auto set\r\n      return new Touch(\r\n        target,\r\n        identifier,\r\n        {\r\n          pageX: pageX,\r\n          pageY: pageY,\r\n          screenX: screenX,\r\n          screenY: screenY,\r\n          clientX: pageX - window.pageXOffset,\r\n          clientY: pageY - window.pageYOffset,\r\n        },\r\n        0,\r\n        0\r\n      );\r\n    };\r\n  }\r\n\r\n  if (!document.createTouchList) {\r\n    document.createTouchList = function () {\r\n      var touchList = TouchList();\r\n      for (var i = 0; i < arguments.length; i++) {\r\n        touchList[i] = arguments[i];\r\n      }\r\n      touchList.length = arguments.length;\r\n      return touchList;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * create an touch point\r\n   * @constructor\r\n   * @param target\r\n   * @param identifier\r\n   * @param pos\r\n   * @param deltaX\r\n   * @param deltaY\r\n   * @returns {Object} touchPoint\r\n   */\r\n\r\n  var Touch = function Touch(target, identifier, pos, deltaX, deltaY) {\r\n    deltaX = deltaX || 0;\r\n    deltaY = deltaY || 0;\r\n\r\n    this.identifier = identifier;\r\n    this.target = target;\r\n    this.clientX = pos.clientX + deltaX;\r\n    this.clientY = pos.clientY + deltaY;\r\n    this.screenX = pos.screenX + deltaX;\r\n    this.screenY = pos.screenY + deltaY;\r\n    this.pageX = pos.pageX + deltaX;\r\n    this.pageY = pos.pageY + deltaY;\r\n  };\r\n\r\n  /**\r\n   * create empty touchlist with the methods\r\n   * @constructor\r\n   * @returns touchList\r\n   */\r\n  function TouchList() {\r\n    var touchList = [];\r\n\r\n    touchList['item'] = function (index) {\r\n      return this[index] || null;\r\n    };\r\n\r\n    // specified by Mozilla\r\n    touchList['identifiedTouch'] = function (id) {\r\n      return this[id + 1] || null;\r\n    };\r\n\r\n    return touchList;\r\n  }\r\n\r\n  /**\r\n   * only trigger touches when the left mousebutton has been pressed\r\n   * @param touchType\r\n   * @returns {Function}\r\n   */\r\n\r\n  var initiated = false;\r\n  function onMouse(touchType) {\r\n    return function (ev) {\r\n      // prevent mouse events\r\n\r\n      if (ev.type === 'mousedown') {\r\n        initiated = true;\r\n      }\r\n\r\n      if (ev.type === 'mouseup') {\r\n        initiated = false;\r\n      }\r\n\r\n      if (ev.type === 'mousemove' && !initiated) {\r\n        return;\r\n      }\r\n\r\n      // The EventTarget on which the touch point started when it was first placed on the surface,\r\n      // even if the touch point has since moved outside the interactive area of that element.\r\n      // also, when the target doesnt exist anymore, we update it\r\n      if (\r\n        ev.type === 'mousedown' ||\r\n        !eventTarget ||\r\n        (eventTarget && !eventTarget.dispatchEvent)\r\n      ) {\r\n        eventTarget = ev.target;\r\n      }\r\n\r\n      triggerTouch(touchType, ev);\r\n\r\n      // reset\r\n      if (ev.type === 'mouseup') {\r\n        eventTarget = null;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * trigger a touch event\r\n   * @param eventName\r\n   * @param mouseEv\r\n   */\r\n  function triggerTouch(eventName, mouseEv) {\r\n    var touchEvent = document.createEvent('Event');\r\n    touchEvent.initEvent(eventName, true, true);\r\n\r\n    touchEvent.altKey = mouseEv.altKey;\r\n    touchEvent.ctrlKey = mouseEv.ctrlKey;\r\n    touchEvent.metaKey = mouseEv.metaKey;\r\n    touchEvent.shiftKey = mouseEv.shiftKey;\r\n\r\n    touchEvent.touches = getActiveTouches(mouseEv);\r\n    touchEvent.targetTouches = getActiveTouches(mouseEv);\r\n    touchEvent.changedTouches = createTouchList(mouseEv);\r\n\r\n    eventTarget.dispatchEvent(touchEvent);\r\n  }\r\n\r\n  /**\r\n   * create a touchList based on the mouse event\r\n   * @param mouseEv\r\n   * @returns {TouchList}\r\n   */\r\n  function createTouchList(mouseEv) {\r\n    var touchList = TouchList();\r\n    touchList.push(new Touch(eventTarget, 1, mouseEv, 0, 0));\r\n    return touchList;\r\n  }\r\n\r\n  /**\r\n   * receive all active touches\r\n   * @param mouseEv\r\n   * @returns {TouchList}\r\n   */\r\n  function getActiveTouches(mouseEv) {\r\n    // empty list\r\n    if (mouseEv.type === 'mouseup') {\r\n      return TouchList();\r\n    }\r\n    return createTouchList(mouseEv);\r\n  }\r\n\r\n  /**\r\n   * TouchEmulator initializer\r\n   */\r\n  function TouchEmulator() {\r\n    window.addEventListener('mousedown', onMouse('touchstart'), true);\r\n    window.addEventListener('mousemove', onMouse('touchmove'), true);\r\n    window.addEventListener('mouseup', onMouse('touchend'), true);\r\n  }\r\n\r\n  // start distance when entering the multitouch mode\r\n  TouchEmulator['multiTouchOffset'] = 75;\r\n\r\n  if (!supportTouch) {\r\n    new TouchEmulator();\r\n  }\r\n})();\r\n"]}